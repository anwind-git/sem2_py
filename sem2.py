import decimal
from math import pi
import cmath

# Создайте несколько переменных разных типов.
# Проверьте к какому типу относятся созданные переменные.

'''
# создаем переменные разных типов
a = 1
b = 2.5
c = "Hello, world!"
d = True
e = list()

# проверяем тип каждой переменной
print(type(a)) # <class 'int'>
print(type(b)) # <class 'float'>
print(type(c)) # <class 'str'>
print(type(d)) # <class 'bool'>
print(type(e)) # <class 'list'>
'''
"""
Создайте в переменной data список значений разных типов перечислив их через 
запятую внутри квадратных скобок. Для каждого элемента в цикле выведите:
- порядковый номер начиная с единицы
- значение
- адрес в памяти
- размер в памяти
- хэш объекта
- результат проверки на целое число только если он положительный
- результат проверки на строку только если он положительный
Добавьте в список повторяющиеся элементы и сравните на результаты.
"""
"""
data = [1, 1, 3, 2.5, "Hi", "Buy", True]

for i in range(len(data)):
    print("№", i+1)
    print("Значение", data[i])
    print("id", id(data[i]))
    print("Размер", data[i].__sizeof__())
    print("HASH", hash(data[i]))
    print("Число", isinstance(data[i], int))
    print("Строка", isinstance(data[i], str))
    print("*" * 25)
"""
"""
- Напишите программу, которая получает целое число и возвращает 
его двоичное, восьмеричное строковое представление.
- Функции bin и oct используйте для проверки своего 
результата, а не для решения.
Дополнительно:
- Попробуйте избежать дублирования кода 
в преобразованиях к разным системам счисления
- Избегайте магических чисел
- Добавьте аннотацию типов где это возможно
"""
"""
sys_select = int(input("Введите базу: "))
n_inp = int(input("Введите число: "))
n = n_inp
res = ''
while n > 0:
    res = str(n % sys_select) + res
    n = n // sys_select

print(res)

if sys_select == 2:
    print(bin(n_inp)[2:])
elif sys_select == 8:
    print(oct(n_inp)[2:])
"""
"""
- Напишите программу, которая вычисляет площадь 
круга и длину окружности по введённому диаметру. 
- Диаметр не превышает 1000 у.е. 
- Точность вычислений должна составлять 
не менее 42 знаков после запятой.
"""
"""
decimal.getcontext().prec = 42
d = 9999
while 0 < d >= 1000:
    d = int(input("Диаметр: "))

s = decimal.Decimal(pi * d / 4)
l = decimal.Decimal(pi * d)

print(f"площадь: {s}\nдлина: {l}")
"""
"""
- Напишите программу, которая решает 
квадратные уравнения даже если 
дискриминант отрицательный. 
- Используйте комплексные числа 
для извлечения квадратного корня.
"""
"""
a = float(input("Введите значение для коэффициента a: "))
b = float(input("Введите значение для коэффициента b: "))
c = float(input("Введите значение для коэффициента c: "))

# Вычисляем дискриминант
d = (b**2) - (4*a*c)

# Находим корни уравнения
sol1 = (-b-cmath.sqrt(d))/(2*a)
sol2 = (-b+cmath.sqrt(d))/(2*a)

# Выводим результат
print('Решения уравнения: {0} и {1}'.format(sol1,sol2))
"""